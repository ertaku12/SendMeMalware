const express = require("express");
const multer = require("multer");
const crypto = require("crypto");
const fs = require("fs");
const path = require("path");
const mysql = require("mysql");
const request = require("request");


const app = express();
const port = 3000;

// Serve static files from the 'public' directory
app.use(express.static("public"));

// MySQL connection
const dbConnection = mysql.createConnection({
  host: "127.0.0.1",
  user: "root",
  password: "password", // Enter your MySQL password here
  database: "files",
  port: 3306,
});

dbConnection.connect((err) => {
  if (err) {
    console.error("Failed to connect to MySQL server: " + err.stack);
    return;
  }
  console.log(
    "Successfully connected to MySQL server. Connection ID: " +
      dbConnection.threadId
  );
});

app.get("/", (req, res) => {
  res.sendFile(__dirname + "/index.html");
});

app.get("/file-count", async (req, res) => {
  const query = "SELECT COUNT(*) AS count FROM file_records";

  // Sorguyu çalıştırma
  dbConnection.query(query, (error, results, fields) => {
    if (error) {
      console.error("Record query error " + error.message);
      return;
    }

    // Sonuçları işleme
    const rowCount = results[0].count;
    //console.log("file_records tablosundaki girdi sayısı: " + rowCount);

    return res.json({ count: rowCount });
  });
});

// Hata işleme middleware'i
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send("Internal Server Error");
});



// Configuration for file upload
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, "uploads/");
  },
  filename: function (req, file, cb) {
    const extension = path.extname(file.originalname);
    const encryptedName = crypto.randomBytes(16).toString("hex");
    cb(null, encryptedName + extension);

    // Get real IP address
    const ipAddress =
      req.headers["x-forwarded-for"] || req.socket.remoteAddress;

    // Save file information to the database
    dbConnection.query(
      "INSERT INTO file_records (original_name, encrypted_name, uploader_ip) VALUES (?, ?, ?)",
      [file.originalname, encryptedName + extension, ipAddress],
      (error, results, fields) => {
        if (error) {
          console.error(
            "An error occurred while saving file information to the database: " +
              error.message
          );
        }
      }
    );
  },
});

const MAX_FILE_SIZE = 100;

const upload = multer({
  storage: storage,
  /*fileFilter: function (req, file, cb) {
    if (file.mimetype == "image/png" || ...) {
      cb(null, true);
    }
    else {
      cb(null, false);
      return cb(new Error('Only .png files are allowed!'));
    }
  }*/
  limits: {
    fileSize: MAX_FILE_SIZE * 1024 * 1024,
    files: 1,
    fieldNameSize: 100,
  }, // 50 MB
}).single("file");

app.post("/upload", (req, res) => {
  upload(req, res, function (err) {
    if (err instanceof multer.MulterError) {
      // a multer error occurred when uploading
      return res.sendStatus(500);
    } else if (err) {
      // Unknown error occurred
      return res.sendStatus(404);
    }

    // Dosya yükleme başarılı oldu
    return res.sendStatus(200);
  });
});

app.listen(port, () => {
  console.log(`Server is running at http://localhost:${port}`);
});
